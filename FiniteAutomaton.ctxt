#BlueJ class context
comment0.params=alphabet\ initStateName\ acceptStates\ transitionsList
comment0.target=FiniteAutomaton(java.util.ArrayList,\ java.lang.String,\ java.util.ArrayList,\ java.util.ArrayList)
comment1.params=
comment1.target=void\ construct()
comment1.text=\n\ construct\ builds\ the\ FA\ from\ the\ transitions\ list,\ adding\ states\ as\ they\ are\ used\n
comment10.params=
comment10.target=State\ getInitState()
comment11.params=
comment11.target=java.util.ArrayList\ getStatesList()
comment2.params=
comment2.target=void\ convertToDFA()
comment2.text=\n\ convertToDFA\ explores\ the\ FA\ starting\ at\ the\ initial\ state\ and\ placing\ states\ and\ combinations\n\ on\ a\ queue\ to\ explore\ transitions\ from\ them\ and\ create\ new\ combinations\ as\ necessary.\n
comment3.params=
comment3.target=void\ printFA()
comment4.params=start\ alph
comment4.target=java.util.ArrayList\ getToStatesList(State,\ java.lang.String)
comment4.text=\n\ getToStatesList\ combines\ all\ the\ toStates\ for\ the\ prev\ states\ combined\ in\ the\ current\ state\ (such\ as\ {1,2})\n\ @return\ toStatesList\n
comment5.params=
comment5.target=void\ convertToComplement()
comment5.text=\n\ Inverte\ the\ isAccept\ boolean\ for\ each\ state\ in\ the\ machine\n
comment6.params=maxLength
comment6.target=java.lang.String\ findAcceptedString(int)
comment6.text=\n\ interface\ method\ for\ generating\ an\ accept\ string,\ within\ maximum\ length\ given\n\ calls\ recursive\ buildAcceptedString\ method\n
comment7.params=s\ w
comment7.target=java.lang.String\ buildAcceptedString(State,\ java.lang.String)
comment7.text=\n\ build\ string\ recursively,\ favoring\ transitioning\ to\ new\ states\ over\ current,\ but\ could\ find\ loops,\ so\ maxes\ out\n\ @return\ acceptedString\n
comment8.params=FA2
comment8.target=void\ makeIntersection(FiniteAutomaton)
comment9.params=FA2
comment9.target=void\ makeUnionWith(FiniteAutomaton)
numComments=12
